# shellcheck shell=bash

################################################################################
######################### Main function (script init) ##########################
################################################################################

function __main__() {

  local _FUNCTION_ID="__main__"
  local _STATE="0"

  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)

  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="${_rel}/log"
  # shellcheck disable=SC2154
  readonly _log_file="${_init_name}.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"

  # Path to import file.
  # shellcheck disable=SC2154
  readonly _import_path="${_src}/import"

  # External configuration file (-c|--config script param).
  config=""
  load_state="0"

  # Declaration of output variables (--debug and --verbose params).
  stdout_mode=""
  printf_mode="verbose"
  # Enable/disable output colors.
  # shellcheck disable=SC2034
  s_color="true"

  # Declaration of total execution time.
  time_tracking="false"
  time_mode="0"
  export _cmdtime_state="0"

  # shellcheck disable=SC2034
  # Stores menu variables.
  _menu_stack=()

  # shellcheck disable=SC2154
  # Temporary output file.
  readonly _tmpA=$(mktemp "${_tmp}/output.XXXXXXXX")
  readonly _tmpB=$(mktemp "${_tmp}/output.XXXXXXXX")

  # Local directory for repositories.
  readonly _repo_directory="${_rel}/repository"

  # Connection arguments.
  export _conn_args=""

  # We place here used commands at script runtime, as strings to anything
  # unnecessarily run.
  readonly commands=("basename" "dirname" "stat" "date" "grep" "egrep" "cut" \
                     "sed" "gzip" "tar" "mktemp" "dialog" "git" "curl" "tor")

  # If you intend to specify the full path to the command we do it like:
  # readonly exec_gzip="/bin/gzip"

  # Stores the names of the missing commands.
  missing_hash=()
  missing_counter="0"

  for i in "${commands[@]}" ; do

    if [[ ! -z "$i" ]] ; then

      hash "$i" >/dev/null 2>&1 ; state="$?"

      # If the command was not found put it in the array
      if [[ "$state" -ne 0 ]] ; then

        missing_hash+=("$i")
        ((missing_counter++))

      fi

    fi

  done

  # It is a good idea to terminate the script at this stage
  # with information for the user to fix the errors if at least one
  # of the required commands in the commands array is not found.
  if [[ "$missing_counter" -gt 0 ]] ; then

    printf "not found in PATH: %s\n" "${missing_hash[*]}" >&2
    _exit_ "1"

  fi

  if [[ "$time_tracking" == "true" ]] ; then
    _begtime=$(date +%s) ; fi

  # shellcheck disable=SC2154
  _logger "init" \
    "init '${_init_name}' in '${_init_directory}'" && \
  _logger "info" \
    "__init_params[] = (${__init_params[*]})," \
    "__script_params[] = (${__script_params[*]})"

  # Include import file.
  _load "null" "$_import_path"

  # Specifies the call parameters of the script, the exact description
  # can be found in _help_ and file README.md.
  local _short_opt=""
  local _long_opt="help,debug,select-all,tor:"

  _GETOPT_PARAMS=$(getopt -o "${_short_opt}" --long "${_long_opt}" \
                   -n "${_init_name}" -- "${__script_params[@]}")

  # With this structure, in the case of problems with the parameters placed
  # in the _GETOPT_PARAMS variable we finish the script. Keep this in mind
  # because it has some consequences - the __main __() function will not be
  # executed.

  # Ends an error if the parameter or its argument is not valid.
  _getopt_state="$?"
  if [ "$_getopt_state" != 0 ] ; then
    _exit_ "1"
  # Ends if no parameter is specified.
  # elif [[ "${#__script_params[@]}" -eq 0 ]] ; then
  #   _exit_ "0"
  fi

  eval set -- "$_GETOPT_PARAMS"
  while true ; do

    case $1 in

      --help)

        _help_

        shift ; _exit_ "0" ;;

      --select-all)

        export select_state="1"

        shift ;;

      --tor)

        export tor_state="1"

        export _tor_port="$2"

        shift 2 ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\n" "$_init_name" "$2"
          _exit_ "1"

        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

  done

  # If you run the script in debug mode, the information
  # will be displayed on the screen from this point.
  if [[ "$stdout_mode" == "debug" ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "starting debug mode"

  fi

  # Running tasks before start user functions.
  _before_init

  ################################# USER SPACE #################################
  # ````````````````````````````````````````````````````````````````````````````
  # Put here all your variable declarations, function calls
  # and all the other code blocks.

  local _max_per_pages=0

  # In this section we add external file (for -c|--config script param).
  if [[ "$load_state" -eq 1 ]] ; then _load "head" "$config" ; fi

  # shellcheck disable=SC2034
  # Generate random value.
  _random=$(date +"%s")

  # Only if you used --time, --verbose and --debug script parameters
  # - checking the relationship between call parameters.
  if [[ "$time_mode" -eq 1 ]] ; then

    if [[ "$printf_mode" != "verbose" ]] ; then

      _sprintf "stop" "missing argument: '--time' occurs only with '--verbose'"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "missing argument: '--time' occurs only with '--verbose'"

    fi

  elif [[ "$stdout_mode" == "debug" ]] ; then

    if [[ "$printf_mode" == "verbose" ]] || [[ "$time_mode" -eq 1 ]] ; then

      _sprintf "stop" "debug mode can not occur together with '--verbose' and '--time'"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "debug mode can not occur together with '--verbose' and '--time'"

    fi

  fi

  # If the --tor parameter was used.
  if [[ "$tor_state" -eq 1 ]] ; then

    _conn_args="--proxy socks5h://localhost:${_tor_port}"

  else

    _conn_args=""

  fi

  # Set repository type.
  _type=$(dialog --clear --backtitle "gitpunk" \
          --menu "Set repository type:" 9 50 50 \
          1 "User repository" 2 "User starred" 3>&1 1>&2 2>&3)

  _kstate=$?
  if [[ $_kstate -ne 0 ]] ; then

    _sprintf "stop" "empty repository type"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "empty repository type"

  fi

  local _repo_type=""

  if [[ "$_type" -eq 1 ]] ; then

    _repo_type="repos"

  elif [[ "$_type" -eq 2 ]] ; then

    _repo_type="starred"

  else

    _sprintf "stop" "unknown repository type"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "unknown repository type"

  fi

  # Set username/account.
  _username=$(dialog --clear --backtitle "gitpunk" \
              --inputbox "Enter the username:" 8 50 \
              3>&1 1>&2 2>&3)

  _kstate=$?
  if [[ $_kstate -ne 0 ]] ; then

    _sprintf "stop" "empty username"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "empty username"

  fi

  # Set the number of pages compatible with account on the github.
  _pages=$(dialog --clear --backtitle "gitpunk" \
           --inputbox "Enter the pages:" 8 50 \
           3>&1 1>&2 2>&3)

  _kstate=$?
  if [[ $_kstate -ne 0 ]] ; then

    _sprintf "stop" "empty pages"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "empty pages"

  fi

  # Array that stores the names of variables used that are part of the script
  # call parameters (_GETOPT_PARAMS). Useful when checking whether all
  # or selected parameters without which the script can not work properly
  # have been used. Do not add the load_state variable to the _opt_values array,
  # which is supported above.
  _opt_values=("_type" "_username" "_pages")

  # Checking the value of the variables (if they are unset or empty):
  #   - variables for call parameters
  #   - variables from the additional configuration files
  if [[ "${#_opt_values[@]}" -ne 0 ]] ; then

    for i in "${_opt_values[@]}" ; do

      _i="" ; eval _i='$'"$i"

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "$i: '$_i'"

      if [[ -z "$_i" ]] ; then

        _sprintf "stop" "error of argument value: '$i' is unset or empty"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "error of argument value: '$i' is unset or empty"

      fi

    done

  fi

  clear

  # Init background tasks.
  _sprintf "head" "Background tasks..."

  _init_function "genPagesNum $_pages"

  _init_function "checkUser $_username"

  _init_function "getRepoList $_username $_max_per_pages $_repo_type"

  _init_function "genRepoList"

  local _repo_num=""
  _repo_num=$(wc -l <"$_tmpA")

  _sprintf "info" "-> found $_repo_num repositories"

  # If the --select-all parameter was used.
  if [[ "$select_state" -eq 1 ]] ; then

    awk '{print $0" \"\" on"}' "$_tmpA" > "$_tmpB"

  else

    awk '{print $0" \"\" off"}' "$_tmpA" > "$_tmpB"

  fi

  menu_options=()

  while read -r number sep text ; do

    menu_options+=(${number//\"} "${sep//\"}" "${text//\"}")

  done < "$_tmpB"

  # Show all repositories.
  _repo_list=($(dialog --clear --backtitle "gitpunk" \
              --checklist "Repositories list ($_repo_num found):" 28 120 20 \
              "${menu_options[@]}" 3>&1 1>&2 2>&3))

  _kstate=$?
  if [[ $_kstate -ne 0 ]] ; then _exit_ 0 ; fi

  dialog --gauge "Cloning repository" 6 100 0 < <(

  n="${#_repo_list[@]}"
  j=0

  for r in "${_repo_list[@]}" ; do

    _pg=$(( 100*(++j)/n ))

cat << __EOF__
XXX
$_pg
Cloning repository: $r
XXX
__EOF__

    # Set directory to {ROOT_DIRECTORY}/repositories.
    cd "${_repo_directory}" || _exit_ 1

    # Clone repository from github.
    git clone "$r" >/dev/null 2>&1

    # Set directory to {ROOT_DIRECTORY}.
    cd ../ || _exit_ 1

  done
)

  dialog --clear --backtitle "gitpunk" \
  --msgbox "Done! Your repositories are in repositories/ directory." 5 65

  # ````````````````````````````````````````````````````````````````````````````

  if [[ "$time_tracking" == "true" ]] ; then

    # Counting the execution time.
    _endtime=$(date +%s)
    _totaltime=$((_endtime - _begtime))

    # Print time header.
    printf '\e[m\e[1;39mTOTAL TIME: %dh:%dm:%ds\e[m\n' \
            $((_totaltime/3600)) $((_totaltime%3600/60)) $((_totaltime%60))

  fi

  return "$_STATE"

}
